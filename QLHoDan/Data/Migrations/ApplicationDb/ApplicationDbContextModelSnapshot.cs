// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLHoDan.Data;

#nullable disable

namespace QLHoDan.Data.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QLHoDan.Models.AchievementEvidenceForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AchievementType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotAcceptedReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResidentIdentityCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RewardCeremonyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ResidentIdentityCode");

                    b.HasIndex("RewardCeremonyId");

                    b.ToTable("AchievementEvidenceForm");
                });

            modelBuilder.Entity("QLHoDan.Models.AchievementRewardPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AchievementType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RewardCeremonyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RewardName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("RewardValue")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("RewardCeremonyId", "AchievementType")
                        .IsUnique();

                    b.ToTable("AchievementRewardPair");
                });

            modelBuilder.Entity("QLHoDan.Models.AddingResidentForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseholdId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NewResidentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotAcceptedReason")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NewResidentId");

                    b.ToTable("AddingResidentForm");
                });

            modelBuilder.Entity("QLHoDan.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("WallpaperLink")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QLHoDan.Models.ChangingHouseholdForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewHouseholdHouseholdId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotAcceptedReason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResidentIdentityCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NewHouseholdHouseholdId");

                    b.HasIndex("ResidentIdentityCode");

                    b.ToTable("ChangingHouseholdForm");
                });

            modelBuilder.Entity("QLHoDan.Models.ChangingHouseholdInfoForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseholdId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotAcceptedReason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerIdentityCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Scope")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("OwnerIdentityCode");

                    b.ToTable("ChangingHouseholdInfoForm");
                });

            modelBuilder.Entity("QLHoDan.Models.ChangingResidentInfoForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicLevel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .HasColumnType("TEXT");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CriminalRecord")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ethnic")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsMale")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Job")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nation")
                        .HasColumnType("TEXT");

                    b.Property<string>("NativeLand")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotAcceptedReason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResidentIdentityCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Workplace")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ResidentIdentityCode");

                    b.ToTable("ChangingResidentInfoForm");
                });

            modelBuilder.Entity("QLHoDan.Models.DeadForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotAcceptedReason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResidentIdentityCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ResidentIdentityCode");

                    b.ToTable("DeadForm");
                });

            modelBuilder.Entity("QLHoDan.Models.Household", b =>
                {
                    b.Property<string>("HouseholdId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsManaged")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MoveOutDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveOutPlace")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveOutReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.HasKey("HouseholdId");

                    b.ToTable("Household");
                });

            modelBuilder.Entity("QLHoDan.Models.HouseholdForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseholdId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageLinks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotAcceptedReason")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("HouseholdForm");
                });

            modelBuilder.Entity("QLHoDan.Models.MovingOutForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MoveOutDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveOutPlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveOutReason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotAcceptedReason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResidentIdentityCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ResidentIdentityCode");

                    b.ToTable("MovingOutForm");
                });

            modelBuilder.Entity("QLHoDan.Models.NotificationMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NotificationMessage");
                });

            modelBuilder.Entity("QLHoDan.Models.Resident", b =>
                {
                    b.Property<string>("IdentityCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("AcademicLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CriminalRecord")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ethnic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseholdId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("IDCardDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDCardPlace")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMale")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsManaged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MoveInDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveInReason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("MoveOutDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveOutPlace")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveOutReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NativeLand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RelationShip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Workplace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdentityCode");

                    b.HasIndex("HouseholdId");

                    b.ToTable("Resident");
                });

            modelBuilder.Entity("QLHoDan.Models.ResidentChangeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChangeType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FormId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResidentIdentityCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ResidentIdentityCode");

                    b.ToTable("ResidentChangeRecord");
                });

            modelBuilder.Entity("QLHoDan.Models.ResidentForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CriminalRecord")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ethnic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HouseholdFormId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMale")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MoveInDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveInReason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NativeLand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RelationShip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Workplace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HouseholdFormId");

                    b.ToTable("ResidentForm");
                });

            modelBuilder.Entity("QLHoDan.Models.RewardCeremony", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ClosingFormDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RewardDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Title", "Time");

                    b.ToTable("RewardCeremony");
                });

            modelBuilder.Entity("QLHoDan.Models.RewardRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AchievementType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResidentIdentityCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RewardCeremonyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RewardName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("RewardValue")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ResidentIdentityCode");

                    b.HasIndex("RewardCeremonyId");

                    b.ToTable("RewardRecord");
                });

            modelBuilder.Entity("QLHoDan.Models.SHForm_Resident", b =>
                {
                    b.Property<int>("SHFormId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResidentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelationShip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SHFormId", "ResidentId");

                    b.HasIndex("ResidentId");

                    b.ToTable("SHForm_Resident");
                });

            modelBuilder.Entity("QLHoDan.Models.SplitingHouseholdForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotAcceptedReason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OwnerIdentityCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerIdentityCode");

                    b.ToTable("SplitingHouseholdForm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QLHoDan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QLHoDan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHoDan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QLHoDan.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLHoDan.Models.AchievementEvidenceForm", b =>
                {
                    b.HasOne("QLHoDan.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentIdentityCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QLHoDan.Models.RewardCeremony", "RewardCeremony")
                        .WithMany()
                        .HasForeignKey("RewardCeremonyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resident");

                    b.Navigation("RewardCeremony");
                });

            modelBuilder.Entity("QLHoDan.Models.AchievementRewardPair", b =>
                {
                    b.HasOne("QLHoDan.Models.RewardCeremony", "RewardCeremony")
                        .WithMany("AchievementRewardPairs")
                        .HasForeignKey("RewardCeremonyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RewardCeremony");
                });

            modelBuilder.Entity("QLHoDan.Models.AddingResidentForm", b =>
                {
                    b.HasOne("QLHoDan.Models.ResidentForm", "NewResident")
                        .WithMany()
                        .HasForeignKey("NewResidentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NewResident");
                });

            modelBuilder.Entity("QLHoDan.Models.ChangingHouseholdForm", b =>
                {
                    b.HasOne("QLHoDan.Models.Household", "NewHousehold")
                        .WithMany()
                        .HasForeignKey("NewHouseholdHouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QLHoDan.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentIdentityCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NewHousehold");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("QLHoDan.Models.ChangingHouseholdInfoForm", b =>
                {
                    b.HasOne("QLHoDan.Models.Household", "Household")
                        .WithMany()
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QLHoDan.Models.Resident", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerIdentityCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Household");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("QLHoDan.Models.ChangingResidentInfoForm", b =>
                {
                    b.HasOne("QLHoDan.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentIdentityCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("QLHoDan.Models.DeadForm", b =>
                {
                    b.HasOne("QLHoDan.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentIdentityCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("QLHoDan.Models.MovingOutForm", b =>
                {
                    b.HasOne("QLHoDan.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentIdentityCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("QLHoDan.Models.Resident", b =>
                {
                    b.HasOne("QLHoDan.Models.Household", "Household")
                        .WithMany("Members")
                        .HasForeignKey("HouseholdId");

                    b.Navigation("Household");
                });

            modelBuilder.Entity("QLHoDan.Models.ResidentChangeRecord", b =>
                {
                    b.HasOne("QLHoDan.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentIdentityCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("QLHoDan.Models.ResidentForm", b =>
                {
                    b.HasOne("QLHoDan.Models.HouseholdForm", null)
                        .WithMany("Members")
                        .HasForeignKey("HouseholdFormId");
                });

            modelBuilder.Entity("QLHoDan.Models.RewardRecord", b =>
                {
                    b.HasOne("QLHoDan.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentIdentityCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QLHoDan.Models.RewardCeremony", "RewardCeremony")
                        .WithMany()
                        .HasForeignKey("RewardCeremonyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Resident");

                    b.Navigation("RewardCeremony");
                });

            modelBuilder.Entity("QLHoDan.Models.SHForm_Resident", b =>
                {
                    b.HasOne("QLHoDan.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLHoDan.Models.SplitingHouseholdForm", "SplitingHouseholdForm")
                        .WithMany()
                        .HasForeignKey("SHFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resident");

                    b.Navigation("SplitingHouseholdForm");
                });

            modelBuilder.Entity("QLHoDan.Models.SplitingHouseholdForm", b =>
                {
                    b.HasOne("QLHoDan.Models.Resident", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerIdentityCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("QLHoDan.Models.Household", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("QLHoDan.Models.HouseholdForm", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("QLHoDan.Models.RewardCeremony", b =>
                {
                    b.Navigation("AchievementRewardPairs");
                });
#pragma warning restore 612, 618
        }
    }
}
